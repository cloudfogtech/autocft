name: Release

on:
  release:
    types: [published, prereleased]

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/autocft
  GHCR_REPO: ghcr.io/${{ github.repository_owner }}/autocft

jobs:
  build-binaries:
    name: Build & Attach Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: 386
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 8
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: 386
          - goos: windows
            goarch: arm64
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive Go version
        id: go-version
        run: |
          ver=$(grep '^go ' go.mod | awk '{print $2}')
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Set tag
        id: meta
        run: echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build binary and checksum
        run: |
          set -euxo pipefail
          tag="${GITHUB_REF_NAME}"
          mkdir -p dist
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"; 
          fi
          outName="autocft_${tag}_${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goarch }}" = "arm" ]; then
            outName="${outName}v${{ matrix.goarm }}"
          fi
          binName="autocft${ext}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
          GOARM=${{ matrix.goarm || '' }} \
          go build -trimpath -ldflags "-s -w" -o "dist/${binName}" ./cmd/autocft
          tar -C dist -czf "dist/${outName}.tar.gz" "${binName}"
          sha256sum "dist/${outName}.tar.gz" > "dist/${outName}.sha256"
          rm "dist/${binName}"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          path: |
            dist/*.tar.gz
            dist/*.sha256
          retention-days: 5

  merge-artifacts:
    name: Merge SHA256SUMS
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate SHA256SUMS.txt
        run: |
          cd dist
          find . -name "*.tar.gz" -exec sha256sum {} \; > SHA256SUMS.txt

      - name: Upload merged SHA256SUMS
        uses: actions/upload-artifact@v4
        with:
          name: dist-sha256
          path: dist/SHA256SUMS.txt
          retention-days: 5

      - name: Upload assets to existing release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*.tar.gz
            dist/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  docker-image-build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: merge-artifacts
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            arch_tag: amd64
          - platform: linux/386
            arch_tag: 386
          - platform: linux/arm64
            arch_tag: arm64
          - platform: linux/arm64/v8
            arch_tag: armv8
          - platform: linux/arm/v7
            arch_tag: armv7
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login DockerHub
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Prepare tags
        id: prep
        run: |
          if [ "${{ github.event.release.prerelease }}" = "true" ]; then
            echo "tags=beta,${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tags=latest,${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push arch image (source build)
        env:
          TAGS: ${{ steps.prep.outputs.tags }}
        run: |
            set -eux
            IFS=',' read -ra arr <<< "$TAGS"
            for t in "${arr[@]}"; do
              docker buildx build \
                --platform "${{ matrix.platform }}" \
                --file Dockerfile \
                --build-arg GO_VERSION=1.25 \
                -t "${DOCKERHUB_REPO}:${t}-${{ matrix.arch_tag }}" \
                -t "${GHCR_REPO}:${t}-${{ matrix.arch_tag }}" \
                --push .
            done

  docker-image-manifest:
    name: Docker Image Manifest
    runs-on: ubuntu-latest
    needs: docker-image-build
    steps:
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login DockerHub
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Prepare tags
        id: prep
        run: |
          if [ "${{ github.event.release.prerelease }}" = "true" ]; then
            echo "tags=beta,${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tags=latest,${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Create & Push manifests
        env:
          TAGS: ${{ steps.prep.outputs.tags }}
        run: |
          set -eux
          archs="amd64 386 arm64 armv8 armv7"
          IFS=',' read -ra arr <<< "$TAGS"
          for t in "${arr[@]}"; do
            # DockerHub
            refs=""
            for a in $archs; do
              refs+=" ${DOCKERHUB_REPO}:${t}-${a}"
            done
            docker buildx imagetools create -t ${DOCKERHUB_REPO}:$t $refs
            # GHCR
            refs=""
            for a in $archs; do
              refs+=" ${GHCR_REPO}:${t}-${a}"
            done
            docker buildx imagetools create -t ${GHCR_REPO}:$t $refs
          done

      - name: Inspect (sample)
        run: |
          set -eux
          TAGS='${{ steps.prep.outputs.tags }}'
          for t in ${TAGS//,/ }; do
            echo "DockerHub manifest for $t:"
            docker buildx imagetools inspect ${DOCKERHUB_REPO}:$t || true
          done
